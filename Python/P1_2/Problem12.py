"""
Problem 12
Title:    Highly Divisible Triangular Number
Author:   Paul Kim
Date:     6/20/2017

Description:
The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:
            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
1:  1
3:  1, 3
6:  1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred
divisors?
"""

def DP_Factors(cache, N):
    pass

def getFactors(N):
    factors = set()
    for i in reversed(range(1, N+1)):
        if N % i == 0:
            factors.add(i)
    return factors

def cacheFactor(cache, N):
    if N in cache:
        return

    factors = getFactors(N)
    for f in factors:
        if not(f in cache):
            cacheFactor(cache, f)
        else:
            factorSet = set()
            factorSet.add(f)


def Main():
    format = "The first triangle number to have over %d divisors is: %d"

    numDivisors = 5
    triNumber = 28
    print(format % (numDivisors, triNumber))

    cache = {}
    cacheFactor(cache, 6)
    cacheFactor(cache, 24)
    cacheFactor(cache, 2)
    cacheFactor(cache, 1)

    for K, V in cache.items():
        print("factors of "+str(K)+":\t",V)

    # finish this later.


Main()
